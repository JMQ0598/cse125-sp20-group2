// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Game_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Game_2eproto;
namespace Game {
class ClientMessage;
class ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
class ServerMessage;
class ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace Game
PROTOBUF_NAMESPACE_OPEN
template<> ::Game::ClientMessage* Arena::CreateMaybeMessage<::Game::ClientMessage>(Arena*);
template<> ::Game::ServerMessage* Arena::CreateMaybeMessage<::Game::ServerMessage>(Arena*);
template<> ::Game::Vector3* Arena::CreateMaybeMessage<::Game::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Game {

enum Net : int {
  PING = 0,
  PONG = 1
};
bool Net_IsValid(int value);
constexpr Net Net_MIN = PING;
constexpr Net Net_MAX = PONG;
constexpr int Net_ARRAYSIZE = Net_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Net_descriptor();
template<typename T>
inline const std::string& Net_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Net>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Net_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Net_descriptor(), enum_t_value);
}
inline bool Net_Parse(
    const std::string& name, Net* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Net>(
    Net_descriptor(), name, value);
}
enum Direction : int {
  UP = 0,
  DOWN = 1,
  LEFT = 2,
  RIGHT = 3
};
bool Direction_IsValid(int value);
constexpr Direction Direction_MIN = UP;
constexpr Direction Direction_MAX = RIGHT;
constexpr int Direction_ARRAYSIZE = Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor();
template<typename T>
inline const std::string& Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Direction_descriptor(), enum_t_value);
}
inline bool Direction_Parse(
    const std::string& name, Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Direction>(
    Direction_descriptor(), name, value);
}
// ===================================================================

class ClientMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Game.ClientMessage) */ {
 public:
  ClientMessage();
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage& default_instance();

  enum EventCase {
    kNet = 1,
    kDirection = 2,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage* New() const final {
    return CreateMaybeMessage<ClientMessage>(nullptr);
  }

  ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Game.ClientMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetFieldNumber = 1,
    kDirectionFieldNumber = 2,
  };
  // optional .Game.Net net = 1;
  bool has_net() const;
  private:
  bool _internal_has_net() const;
  public:
  void clear_net();
  ::Game::Net net() const;
  void set_net(::Game::Net value);
  private:
  ::Game::Net _internal_net() const;
  void _internal_set_net(::Game::Net value);
  public:

  // optional .Game.Direction direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::Game::Direction direction() const;
  void set_direction(::Game::Direction value);
  private:
  ::Game::Direction _internal_direction() const;
  void _internal_set_direction(::Game::Direction value);
  public:

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:Game.ClientMessage)
 private:
  class _Internal;
  void set_has_net();
  void set_has_direction();

  inline bool has_event() const;
  inline void clear_has_event();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union EventUnion {
    EventUnion() {}
    int net_;
    int direction_;
  } event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Game.ServerMessage) */ {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage& default_instance();

  enum EventCase {
    kNet = 1,
    kVector = 2,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage* New() const final {
    return CreateMaybeMessage<ServerMessage>(nullptr);
  }

  ServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Game.ServerMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetFieldNumber = 1,
    kVectorFieldNumber = 2,
  };
  // optional .Game.Net net = 1;
  bool has_net() const;
  private:
  bool _internal_has_net() const;
  public:
  void clear_net();
  ::Game::Net net() const;
  void set_net(::Game::Net value);
  private:
  ::Game::Net _internal_net() const;
  void _internal_set_net(::Game::Net value);
  public:

  // optional .Game.Vector3 vector = 2;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::Game::Vector3& vector() const;
  ::Game::Vector3* release_vector();
  ::Game::Vector3* mutable_vector();
  void set_allocated_vector(::Game::Vector3* vector);
  private:
  const ::Game::Vector3& _internal_vector() const;
  ::Game::Vector3* _internal_mutable_vector();
  public:

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:Game.ServerMessage)
 private:
  class _Internal;
  void set_has_net();
  void set_has_vector();

  inline bool has_event() const;
  inline void clear_has_event();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union EventUnion {
    EventUnion() {}
    int net_;
    ::Game::Vector3* vector_;
  } event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class Vector3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Game.Vector3) */ {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return CreateMaybeMessage<Vector3>(nullptr);
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Game.Vector3";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYFieldNumber = 2,
    kXFieldNumber = 1,
    kZFieldNumber = 3,
  };
  // required float y = 2 [default = 0];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float x = 1 [default = 1];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float z = 3 [default = 1];
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Game.Vector3)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float y_;
  float x_;
  float z_;
  friend struct ::TableStruct_Game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientMessage

// optional .Game.Net net = 1;
inline bool ClientMessage::_internal_has_net() const {
  return event_case() == kNet;
}
inline bool ClientMessage::has_net() const {
  return _internal_has_net();
}
inline void ClientMessage::set_has_net() {
  _oneof_case_[0] = kNet;
}
inline void ClientMessage::clear_net() {
  if (_internal_has_net()) {
    event_.net_ = 0;
    clear_has_event();
  }
}
inline ::Game::Net ClientMessage::_internal_net() const {
  if (_internal_has_net()) {
    return static_cast< ::Game::Net >(event_.net_);
  }
  return static_cast< ::Game::Net >(0);
}
inline ::Game::Net ClientMessage::net() const {
  // @@protoc_insertion_point(field_get:Game.ClientMessage.net)
  return _internal_net();
}
inline void ClientMessage::_internal_set_net(::Game::Net value) {
  assert(::Game::Net_IsValid(value));
  if (!_internal_has_net()) {
    clear_event();
    set_has_net();
  }
  event_.net_ = value;
}
inline void ClientMessage::set_net(::Game::Net value) {
  // @@protoc_insertion_point(field_set:Game.ClientMessage.net)
  _internal_set_net(value);
}

// optional .Game.Direction direction = 2;
inline bool ClientMessage::_internal_has_direction() const {
  return event_case() == kDirection;
}
inline bool ClientMessage::has_direction() const {
  return _internal_has_direction();
}
inline void ClientMessage::set_has_direction() {
  _oneof_case_[0] = kDirection;
}
inline void ClientMessage::clear_direction() {
  if (_internal_has_direction()) {
    event_.direction_ = 0;
    clear_has_event();
  }
}
inline ::Game::Direction ClientMessage::_internal_direction() const {
  if (_internal_has_direction()) {
    return static_cast< ::Game::Direction >(event_.direction_);
  }
  return static_cast< ::Game::Direction >(0);
}
inline ::Game::Direction ClientMessage::direction() const {
  // @@protoc_insertion_point(field_get:Game.ClientMessage.direction)
  return _internal_direction();
}
inline void ClientMessage::_internal_set_direction(::Game::Direction value) {
  assert(::Game::Direction_IsValid(value));
  if (!_internal_has_direction()) {
    clear_event();
    set_has_direction();
  }
  event_.direction_ = value;
}
inline void ClientMessage::set_direction(::Game::Direction value) {
  // @@protoc_insertion_point(field_set:Game.ClientMessage.direction)
  _internal_set_direction(value);
}

inline bool ClientMessage::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void ClientMessage::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline ClientMessage::EventCase ClientMessage::event_case() const {
  return ClientMessage::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ServerMessage

// optional .Game.Net net = 1;
inline bool ServerMessage::_internal_has_net() const {
  return event_case() == kNet;
}
inline bool ServerMessage::has_net() const {
  return _internal_has_net();
}
inline void ServerMessage::set_has_net() {
  _oneof_case_[0] = kNet;
}
inline void ServerMessage::clear_net() {
  if (_internal_has_net()) {
    event_.net_ = 0;
    clear_has_event();
  }
}
inline ::Game::Net ServerMessage::_internal_net() const {
  if (_internal_has_net()) {
    return static_cast< ::Game::Net >(event_.net_);
  }
  return static_cast< ::Game::Net >(0);
}
inline ::Game::Net ServerMessage::net() const {
  // @@protoc_insertion_point(field_get:Game.ServerMessage.net)
  return _internal_net();
}
inline void ServerMessage::_internal_set_net(::Game::Net value) {
  assert(::Game::Net_IsValid(value));
  if (!_internal_has_net()) {
    clear_event();
    set_has_net();
  }
  event_.net_ = value;
}
inline void ServerMessage::set_net(::Game::Net value) {
  // @@protoc_insertion_point(field_set:Game.ServerMessage.net)
  _internal_set_net(value);
}

// optional .Game.Vector3 vector = 2;
inline bool ServerMessage::_internal_has_vector() const {
  return event_case() == kVector;
}
inline bool ServerMessage::has_vector() const {
  return _internal_has_vector();
}
inline void ServerMessage::set_has_vector() {
  _oneof_case_[0] = kVector;
}
inline void ServerMessage::clear_vector() {
  if (_internal_has_vector()) {
    delete event_.vector_;
    clear_has_event();
  }
}
inline ::Game::Vector3* ServerMessage::release_vector() {
  // @@protoc_insertion_point(field_release:Game.ServerMessage.vector)
  if (_internal_has_vector()) {
    clear_has_event();
      ::Game::Vector3* temp = event_.vector_;
    event_.vector_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Game::Vector3& ServerMessage::_internal_vector() const {
  return _internal_has_vector()
      ? *event_.vector_
      : *reinterpret_cast< ::Game::Vector3*>(&::Game::_Vector3_default_instance_);
}
inline const ::Game::Vector3& ServerMessage::vector() const {
  // @@protoc_insertion_point(field_get:Game.ServerMessage.vector)
  return _internal_vector();
}
inline ::Game::Vector3* ServerMessage::_internal_mutable_vector() {
  if (!_internal_has_vector()) {
    clear_event();
    set_has_vector();
    event_.vector_ = CreateMaybeMessage< ::Game::Vector3 >(
        GetArenaNoVirtual());
  }
  return event_.vector_;
}
inline ::Game::Vector3* ServerMessage::mutable_vector() {
  // @@protoc_insertion_point(field_mutable:Game.ServerMessage.vector)
  return _internal_mutable_vector();
}

inline bool ServerMessage::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void ServerMessage::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline ServerMessage::EventCase ServerMessage::event_case() const {
  return ServerMessage::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Vector3

// required float x = 1 [default = 1];
inline bool Vector3::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vector3::has_x() const {
  return _internal_has_x();
}
inline void Vector3::clear_x() {
  x_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Vector3::_internal_x() const {
  return x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:Game.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Game.Vector3.x)
}

// required float y = 2 [default = 0];
inline bool Vector3::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vector3::has_y() const {
  return _internal_has_y();
}
inline void Vector3::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Vector3::_internal_y() const {
  return y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:Game.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000001u;
  y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Game.Vector3.y)
}

// required float z = 3 [default = 1];
inline bool Vector3::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vector3::has_z() const {
  return _internal_has_z();
}
inline void Vector3::clear_z() {
  z_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Vector3::_internal_z() const {
  return z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:Game.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Game.Vector3.z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Game

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Game::Net> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::Net>() {
  return ::Game::Net_descriptor();
}
template <> struct is_proto_enum< ::Game::Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Game::Direction>() {
  return ::Game::Direction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Game_2eproto
